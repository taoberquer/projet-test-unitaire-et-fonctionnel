<?php

namespace Tests\AppBundle\Service;


use App\Models\Item;
use App\Models\ToDoList;
use App\Models\User;
use App\Sercices\ItemService;
use Carbon\Carbon;
use PHPUnit\Framework\TestCase;

/**
 * Class ItemServiceTest
 * @package Tests\AppBundle\Service
 */
class ItemServiceTest extends TestCase
{
    /**
     * @var User
     */
    protected User $user;

    /**
     * @var Item
     */
    protected Item $item;

    /**
     * @var ToDoList|\Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    protected ToDoList $toDoList;

    /**
     *
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::create([
            'firstname' => 'Remi',
            'lastname' => 'BRAT',
            'email' => 'rbrat@gmail.com',
            'uncrypted_password' => 'lesupermotdepasse',
            'birthday' => Carbon::now(),
        ]);

        $this->toDoList = $this->user->toDoList()->create([
            'name' => 'La todoux',
            'description' => 'los descriptor'
        ]);

        $this->item = $this->toDoList()->items()->create([
            'name' => 'Le premier item',
            'content' => 'Ceci est du contenu'
        ]);

    }

    /**
     *
     */
    public function testIfItemNotExist()
    {
        $fakeItem = new Item([
            'name' => 'Le deuxieme item',
            'content' => 'Ceci est du contenu'
        ]);

        $this->assertTrue((new ItemService())->isNameUnique($fakeItem));
    }

    /**
     *
     */
    public function testIfItemExist()
    {
        $fakeItem = $this->toDoList->items()->create([
            'name' => 'Le deuxieme item',
            'content' => 'Ceci est du contenu'
        ]);

        $this->assetFalse((new ItemService())->isNameUnique($fakeItem));
    }

    /**
     *
     */
    public function testIsItemValid() {
        $fakeItem = $this->toDoList->items()->create([
            'name' => 'Le deuxieme item',
            'content' => 'Ceci est du contenu'
        ]);

        $this->assertEmpty((new ItemService())->isValid($fakeItem));
    }

    /**
     *
     */
    public function testNameItemEmpty() {
        $fakeItem = new Item([
            'content' => 'Ceci est du contenu'
        ]);

        $this->assertNotEmpty((new ItemService())->isValid($fakeItem));
    }

    /**
     *
     */
    public function testContentItemEmpty() {
        $fakeItem = new Item([
            'name' => 'Le deuxieme item',
        ]);

        $this->assertNotEmpty((new ItemService())->isValid($fakeItem));
    }

    /**
     *
     */
    public function testItemAlreadyExist() {
        $this->assertNotEmpty((new ItemService())->isValid($this->item));
    }
}
