<?php

use App\Models\User;
use App\Services\UserService;
use Carbon\Carbon;
use Illuminate\Support\Str;

class UserTestService extends TestCase
{
    protected User $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = new User([
            'lastname' => 'dfzefz',
            'firstname' => 'fdszfez',
            'uncrypted_password' => 'ezfezddzzddd',
            'email' => 'tao.berquer@gmail.com',
            'birthday' => (new Carbon())->subYears(20)
        ]);
    }

    public function testIsValidNominal()
    {
        $this->assertTrue((new UserService())->isValid($this->user));
    }

    public function testNotValideDueToLastname()
    {
        $this->user->lastname = null;

        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Lastname is missing');

        (new UserService())->isValid($this->user);
    }

    public function testNotValideDueToFirstname()
    {
        $this->user->firstname = null;

        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Firstname is missing');

        (new UserService())->isValid($this->user);
    }

    public function testNotValideDueToPassword()
    {
        $this->user->uncrypted_password = Str::random(7);
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Incorrect password');

        (new UserService())->isValid($this->user);

        $this->user->uncrypted_password = Str::random(41);

        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Incorrect password');

        (new UserService())->isValid($this->user);
    }

    public function testNotValideDueToEmail()
    {
        $this->user->email = 'dddd.com';
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Incorrect email');

        (new UserService())->isValid($this->user);
    }

    public function testNotValideDueToBirthday()
    {
        $this->user->birthday = Carbon::now()->subYear('1');
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('Incorrect age');

        (new UserService())->isValid($this->user);
    }
}
